#!/bin/bash
### BEGIN INIT INFO
# Provides:          gleam
# Required-Start:    $network $remote_fs $local_fs 
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Stop/start gleam
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=gleam
DESC=gleam
DAEMON=/usr/local/bin/gleam
PID=/run/$NAME.pid

test -x $DAEMON
if [ $? -eq 1 ]; then
	echo "Missing binary file: $DAEMON"
	exit 1
fi

set -e

. /lib/lsb/init-functions

start_gleam() {
	if [ -f $PID ]; then
		echo -n "Already started " && return 1
	fi
	$DAEMON -scripts=/usr/local/share/gleam &
	echo $! > $PID
	return 0
}

stop_gleam() {
	[ ! -f $PID ] && echo -n "Not running " && return 1
	p=`cat $PID`
	[ -n "$p" ] && kill -INT $p &> /dev/null
	rm $PID
	if [ $? -ne 0 ]; then
		return 1
	fi
	return 0
}

waitstart() {
	i=0
	while [ ! -f $PID ] ; do
		echo -n .
		sleep 0.2
		if [ $i -gt 50 ]; then
			return 1
		fi
		i=$(($i + 1))
	done
}

waitstop() {	
	i=0
	while [ -f $PID ] ; do
		echo -n .
		sleep 0.2
		if [ $i -gt 50 ]; then
			return 1
		fi
		i=$(($i + 1))
	done
}

_start() { 
	if start_gleam; then
		if waitstart; then
			echo "... OK."
		else
			echo "... Waiting too long."
		fi
	else
		echo "... FAILED."
	fi
}

_stop() {
	if stop_gleam; then
		if waitstop; then
			echo "... OK."
		else
			echo "... Waiting too long."
		fi
	else
		echo "... FAILED."	
	fi
}

case "$1" in
	start)
		echo -n "Starting $NAME: "
		_start
		;;
	stop)
		echo -n "Stopping $NAME: "
		_stop
		;;
	restart)
		echo "Restarting $NAME"
		echo -n "Stopping: "
		_stop
		echo -n "Starting: "	
		_start
		;;
	*)
		echo "Usage: $NAME {start|stop|restart}" >&2
		exit 1
		;;
esac

exit 0
